# Copyright 2024 Volvo Car Corporation
# Licensed under Apache 2.0.

"""Test data used by unit test for CoreDummy class."""

#######################################################
# RB

RB_HEADER_H_TL = '''/* Autogenerated core id dummy file */

#ifndef TESTFILE_H
#define TESTFILE_H
#include "vcc_rb_core.h"
#include "tl_basetypes.h"
'''

RB_HEADER_H_MIXED = '''/* Autogenerated core id dummy file */

#ifndef TESTFILE_H
#define TESTFILE_H
#include "vcc_rb_core.h"
#include "rtwtypes.h"
#include "tl_basetypes.h"
'''

RB_HEADER_H_EC = '''/* Autogenerated core id dummy file */

#ifndef TESTFILE_H
#define TESTFILE_H
#include "vcc_rb_core.h"
#include "rtwtypes.h"
'''

RB_HEADER_C = '''/* Autogenerated core id dummy file */

#include "TESTFILE.h"

#include "CVC_CODE_START.h"

#ifndef VcEvDummy_ID
  #define VcEvDummy_ID 1
#endif /* VcEvDummy_ID */
#ifndef VcEvDummy_DEBMODE
  #define VcEvDummy_DEBMODE 0
#endif /* VcEvDummy_DEBMODE */
#ifndef VcFiDummy_ID
  #define VcFiDummy_ID 1
#endif /* VcFiDummy_ID */
#ifndef Vc06Dummy_ID
  #define Vc06Dummy_ID 1
#endif /* Vc06Dummy_ID */
#ifndef Vc09Dummy_ID
  #define Vc09Dummy_ID 1
#endif /* Vc09Dummy_ID */
#ifndef VcRvDummy_ID
  #define VcRvDummy_ID 1
#endif /* VcRvDummy_ID */

'''

RB_EVENT_H = '''#ifndef VcEvAmbPCompPlausMon
   /* Event Id for Ambient Pressure rationality monitor (comparison to other sensor at eng off) */
   extern const DSM_DFCType DFC_VcEvAmbPCompPlausMon ;
   #define VcEvAmbPCompPlausMon (((DFC_VcEvAmbPCompPlausMon.debmode) << 12u) | (DFC_VcEvAmbPCompPlausMon.id))
   #define VcEvAmbPCompPlausMon_Dummy
#endif

#ifndef VcEvCacPCompPlausMon
   /* Event Id for CAC Pressure Rationality Monitor (comparison to other sensor at eng off) */
   extern const DSM_DFCType DFC_VcEvCacPCompPlausMon ;
   #define VcEvCacPCompPlausMon (((DFC_VcEvCacPCompPlausMon.debmode) << 12u) | (DFC_VcEvCacPCompPlausMon.id))
   #define VcEvCacPCompPlausMon_Dummy
#endif

'''

RB_EVENT_C = '''#ifdef VcEvAmbPCompPlausMon_Dummy
   /* Event Id for Ambient Pressure rationality monitor (comparison to other sensor at eng off) */
   const DSM_DFCType DFC_VcEvAmbPCompPlausMon = {VcEvDummy_ID, VcEvDummy_DEBMODE};
   #warning "CoreID: VcEvAmbPCompPlausMon is not defined in the supplier SW"
#endif

#ifdef VcEvCacPCompPlausMon_Dummy
   /* Event Id for CAC Pressure Rationality Monitor (comparison to other sensor at eng off) */
   const DSM_DFCType DFC_VcEvCacPCompPlausMon = {VcEvDummy_ID, VcEvDummy_DEBMODE};
   #warning "CoreID: VcEvCacPCompPlausMon is not defined in the supplier SW"
#endif

'''

RB_FID_H = '''#ifndef VcFiAmbPCompPlausMon
   /* VcFi forAmbient Pressure Rationality Monitor  (comparison to other sensor at eng off) */
   extern const DSM_FIdType FId_VcFiAmbPCompPlausMon ;
   #define VcFiAmbPCompPlausMon (FId_VcFiAmbPCompPlausMon.id)
   #define VcFiAmbPCompPlausMon_Dummy
#endif

#ifndef VcFiCacPCompPlausMon
   /* VcFi for CAC Pressure Rationality Monitor  (comparison to other sensor at eng off) */
   extern const DSM_FIdType FId_VcFiCacPCompPlausMon ;
   #define VcFiCacPCompPlausMon (FId_VcFiCacPCompPlausMon.id)
   #define VcFiCacPCompPlausMon_Dummy
#endif

'''

RB_FID_C = '''#ifdef VcFiAmbPCompPlausMon_Dummy
   /* VcFi forAmbient Pressure Rationality Monitor  (comparison to other sensor at eng off) */
   const DSM_FIdType FId_VcFiAmbPCompPlausMon = {VcFiDummy_ID};
   #warning "CoreID: VcFiAmbPCompPlausMon is not defined in the supplier SW"
#endif

#ifdef VcFiCacPCompPlausMon_Dummy
   /* VcFi for CAC Pressure Rationality Monitor  (comparison to other sensor at eng off) */
   const DSM_FIdType FId_VcFiCacPCompPlausMon = {VcFiDummy_ID};
   #warning "CoreID: VcFiCacPCompPlausMon is not defined in the supplier SW"
#endif

'''

RB_IUMPR_H = '''#ifndef Vc09BoostHiPlausMon
   /* Ratio Id for Boost Pressure High Rationality Monitor */
   extern const DSM_FIdType FId_Vc09BoostHiPlausMon ;
   #define Vc09BoostHiPlausMon (FId_Vc09BoostHiPlausMon.id)
   #define Vc09BoostHiPlausMon_Dummy
#endif

#ifndef Vc09BoostLoPlausMon
   /* Ratio Id for Boost Pressure Low Rationality Monitor */
   extern const DSM_FIdType FId_Vc09BoostLoPlausMon ;
   #define Vc09BoostLoPlausMon (FId_Vc09BoostLoPlausMon.id)
   #define Vc09BoostLoPlausMon_Dummy
#endif

'''

RB_IUMPR_C = '''#ifdef Vc09BoostHiPlausMon_Dummy
   /* Ratio Id for Boost Pressure High Rationality Monitor */
   const DSM_FIdType FId_Vc09BoostHiPlausMon = {Vc09Dummy_ID};
   #warning "CoreID: Vc09BoostHiPlausMon is not defined in the supplier SW"
#endif

#ifdef Vc09BoostLoPlausMon_Dummy
   /* Ratio Id for Boost Pressure Low Rationality Monitor */
   const DSM_FIdType FId_Vc09BoostLoPlausMon = {Vc09Dummy_ID};
   #warning "CoreID: Vc09BoostLoPlausMon is not defined in the supplier SW"
#endif

'''

RB_MODE06_H = '''#ifndef Vc06BoostHiPlausMon
   /* Test Result Id for high boost pressure Monitoring, UAS 17 */
   extern const DSM_DTRType DTR_Vc06BoostHiPlausMon;
   #define Vc06BoostHiPlausMon (DTR_Vc06BoostHiPlausMon.id)
   #define Vc06BoostHiPlausMon_Dummy
#endif

#ifndef Vc06BoostLoPlausMon
   /* Test Result Id for low boost pressure Monitoring, UAS 18 */
   extern const DSM_DTRType DTR_Vc06BoostLoPlausMon;
   #define Vc06BoostLoPlausMon (DTR_Vc06BoostLoPlausMon.id)
   #define Vc06BoostLoPlausMon_Dummy
#endif

'''

RB_MODE06_C = '''#ifdef Vc06BoostHiPlausMon_Dummy
   /* Test Result Id for high boost pressure Monitoring, UAS 17 */
   const DSM_DTRType DTR_Vc06BoostHiPlausMon = {Vc06Dummy_ID};
#warning "CoreID: Vc06BoostHiPlausMon is not defined in the supplier SW"
#endif

#ifdef Vc06BoostLoPlausMon_Dummy
   /* Test Result Id for low boost pressure Monitoring, UAS 18 */
   const DSM_DTRType DTR_Vc06BoostLoPlausMon = {Vc06Dummy_ID};
#warning "CoreID: Vc06BoostLoPlausMon is not defined in the supplier SW"
#endif

'''

RB_RNK_H_TL = '''#ifndef VcRvAmbPCompPlausMon
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   extern const UInt16 DSMAppl_RnkValStorg_RnkId_VcRvAmbPCompPlausMon;
   #define VcRvAmbPCompPlausMon DSMAppl_RnkValStorg_RnkId_VcRvAmbPCompPlausMon
   #define VcRvAmbPCompPlausMon_Dummy
#endif

#ifndef VcRvCacPAmbPPlausMon
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   extern const UInt16 DSMAppl_RnkValStorg_RnkId_VcRvCacPAmbPPlausMon;
   #define VcRvCacPAmbPPlausMon DSMAppl_RnkValStorg_RnkId_VcRvCacPAmbPPlausMon
   #define VcRvCacPAmbPPlausMon_Dummy
#endif

'''

RB_RNK_H_EC = '''#ifndef VcRvAmbPCompPlausMon
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   extern const uint16_T DSMAppl_RnkValStorg_RnkId_VcRvAmbPCompPlausMon;
   #define VcRvAmbPCompPlausMon DSMAppl_RnkValStorg_RnkId_VcRvAmbPCompPlausMon
   #define VcRvAmbPCompPlausMon_Dummy
#endif

#ifndef VcRvCacPAmbPPlausMon
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   extern const uint16_T DSMAppl_RnkValStorg_RnkId_VcRvCacPAmbPPlausMon;
   #define VcRvCacPAmbPPlausMon DSMAppl_RnkValStorg_RnkId_VcRvCacPAmbPPlausMon
   #define VcRvCacPAmbPPlausMon_Dummy
#endif

'''

RB_RNK_C_TL = '''#ifdef VcRvAmbPCompPlausMon_Dummy
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   const UInt16 DSMAppl_RnkValStorg_RnkId_VcRvAmbPCompPlausMon = VcRvDummy_ID;
   #warning "CoreID: VcRvAmbPCompPlausMon is not defined in the supplier SW"
#endif

#ifdef VcRvCacPAmbPPlausMon_Dummy
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   const UInt16 DSMAppl_RnkValStorg_RnkId_VcRvCacPAmbPPlausMon = VcRvDummy_ID;
   #warning "CoreID: VcRvCacPAmbPPlausMon is not defined in the supplier SW"
#endif

'''

RB_RNK_C_EC = '''#ifdef VcRvAmbPCompPlausMon_Dummy
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   const uint16_T DSMAppl_RnkValStorg_RnkId_VcRvAmbPCompPlausMon = VcRvDummy_ID;
   #warning "CoreID: VcRvAmbPCompPlausMon is not defined in the supplier SW"
#endif

#ifdef VcRvCacPAmbPPlausMon_Dummy
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   const uint16_T DSMAppl_RnkValStorg_RnkId_VcRvCacPAmbPPlausMon = VcRvDummy_ID;
   #warning "CoreID: VcRvCacPAmbPPlausMon is not defined in the supplier SW"
#endif

'''

RB_END_H = r'''#endif /* TESTFILE */
/*----------------------------------------------------------------------------*\
  END OF FILE
\*----------------------------------------------------------------------------*/
'''

RB_END_C = r'''#include "CVC_CODE_END.h"
/*----------------------------------------------------------------------------*\
  END OF FILE
\*----------------------------------------------------------------------------*/
'''


#######################################################
# Denso

DG2_HEADER_H = '''/* Autogenerated core id dummy file */

#ifndef TESTFILE
#define TESTFILE

#include "VcCoreSupplierAbstraction.h"

/* Check if denso make env. has defined the AUTOSAR declarations
   if not, do dummy declaration to be able to build a dummy I/F in
   an old make environment */
#ifndef FUNC
  #define FUNC(rettype, memclass) rettype /* from Compiler.h */
  #define P2VAR(ptrtype, memclass, ptrclass) ptrtype * /* from Compiler.h */
  typedef unsigned char Std_ReturnType; /* from Std_Types.h */
  typedef unsigned char Dem_EventStatusType;
  typedef unsigned char boolean;
  #define AUTOMATIC
  #define RTE_APPL_DATA
  #define RTE_CODE /* from Compiler_cfg.h */
#endif /* TESTFILE */

#include "CVC_CODE_START.h"
'''

DG2_HEADER_C_TL = '''/* Autogenerated core id dummy file */

#include "testfile"
#include "tl_basetypes.h"
#include "CVC_CODE_START.h"

#define Vc06Undef 1
#define Vc09Undef 1
#define VcRvUndef 1

'''

DG2_HEADER_C_MIXED = '''/* Autogenerated core id dummy file */

#include "testfile"
#include "rtwtypes.h"
#include "tl_basetypes.h"
#include "CVC_CODE_START.h"

#define Vc06Undef 1
#define Vc09Undef 1
#define VcRvUndef 1

'''

DG2_HEADER_C_EC = '''/* Autogenerated core id dummy file */

#include "testfile"
#include "rtwtypes.h"
#include "CVC_CODE_START.h"

#define Vc06Undef 1
#define Vc09Undef 1
#define VcRvUndef 1

'''

DG2_EVENT_H = ('#ifndef Rte_Call_Event_VcEvAmbPCompPlausMon_SetEventStatus\n'
               '   /* Event Id for Ambient Pressure rationality monitor (comparison to other sensor at eng off) */\n'
               '   extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvAmbPCompPlausMon_SetEventStatus'
               ' (Dem_EventStatusType EventStatus);\n'
               '#endif\n'
               '\n'
               '#ifndef Rte_Call_Event_VcEvAmbPCompPlausMon_SetEventDisabled\n'
               '   /* Event Id for Ambient Pressure rationality monitor (comparison to other sensor at eng off) */\n'
               '   extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvAmbPCompPlausMon_SetEventDisabled'
               ' (void);\n'
               '#endif\n'
               '\n'
               '#ifndef Rte_Call_Event_VcEvCacPCompPlausMon_SetEventStatus\n'
               '   /* Event Id for CAC Pressure Rationality Monitor (comparison to other sensor at eng off) */\n'
               '   extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvCacPCompPlausMon_SetEventStatus'
               ' (Dem_EventStatusType EventStatus);\n'
               '#endif\n'
               '\n'
               '#ifndef Rte_Call_Event_VcEvCacPCompPlausMon_SetEventDisabled\n'
               '   /* Event Id for CAC Pressure Rationality Monitor (comparison to other sensor at eng off) */\n'
               '   extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvCacPCompPlausMon_SetEventDisabled'
               ' (void);\n'
               '#endif\n'
               '\n')

DG2_EVENT_C = ('#ifndef Rte_Call_Event_VcEvAmbPCompPlausMon_SetEventStatus\n'
               '   /* Event Id for Ambient Pressure rationality monitor (comparison to other sensor at eng off) */\n'
               '   FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvAmbPCompPlausMon_SetEventStatus'
               ' (Dem_EventStatusType EventStatus) { return 0;}\n'
               '#endif\n'
               '\n'
               '#ifndef Rte_Call_Event_VcEvAmbPCompPlausMon_SetEventDisabled\n'
               '   /* Event Id for Ambient Pressure rationality monitor (comparison to other sensor at eng off) */\n'
               '   FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvAmbPCompPlausMon_SetEventDisabled (void)'
               ' { return 0;}\n'
               '#endif\n'
               '\n'
               '#ifndef Rte_Call_Event_VcEvCacPCompPlausMon_SetEventStatus\n'
               '   /* Event Id for CAC Pressure Rationality Monitor (comparison to other sensor at eng off) */\n'
               '   FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvCacPCompPlausMon_SetEventStatus'
               ' (Dem_EventStatusType EventStatus) { return 0;}\n'
               '#endif\n'
               '\n'
               '#ifndef Rte_Call_Event_VcEvCacPCompPlausMon_SetEventDisabled\n'
               '   /* Event Id for CAC Pressure Rationality Monitor (comparison to other sensor at eng off) */\n'
               '   FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_Event_VcEvCacPCompPlausMon_SetEventDisabled (void)'
               ' { return 0;}\n'
               '#endif\n'
               '\n')

DG2_FID_H = ('#ifndef Rte_Call_FI_VcFiAmbPCompPlausMon_GetFunctionPermission\n'
             '   /* VcFi forAmbient Pressure Rationality Monitor  (comparison to other sensor at eng off) */\n'
             '   extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_FI_VcFiAmbPCompPlausMon_GetFunctionPermission'
             ' (P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) Permission);\n'
             '#endif\n'
             '\n'
             '#ifndef Rte_Call_FI_VcFiCacPCompPlausMon_GetFunctionPermission\n'
             '   /* VcFi for CAC Pressure Rationality Monitor  (comparison to other sensor at eng off) */\n'
             '   extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_FI_VcFiCacPCompPlausMon_GetFunctionPermission'
             ' (P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) Permission);\n'
             '#endif\n'
             '\n')

DG2_FID_C = ('#ifndef Rte_Call_FI_VcFiAmbPCompPlausMon_GetFunctionPermission\n'
             '   /* VcFi forAmbient Pressure Rationality Monitor  (comparison to other sensor at eng off) */\n'
             '   FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_FI_VcFiAmbPCompPlausMon_GetFunctionPermission'
             ' (P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) Permission) { *Permission = 1; return 0;}\n'
             '#endif\n'
             '\n'
             '#ifndef Rte_Call_FI_VcFiCacPCompPlausMon_GetFunctionPermission\n'
             '   /* VcFi for CAC Pressure Rationality Monitor  (comparison to other sensor at eng off) */\n'
             '   FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Diag_FI_VcFiCacPCompPlausMon_GetFunctionPermission'
             ' (P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) Permission) { *Permission = 1; return 0;}\n'
             '#endif\n'
             '\n')

DG2_IUMPR_H_TL = '''#ifndef IUMID_Vc09BoostHiPlausMon
   /* Ratio Id for Boost Pressure High Rationality Monitor */
   #define IUMID_Vc09BoostHiPlausMon cIUMID_Vc09BoostHiPlausMon
   #define Vc09BoostHiPlausMon_DUMMY
   extern const UInt16 cIUMID_Vc09BoostHiPlausMon;
#endif

#ifndef IUMID_Vc09BoostLoPlausMon
   /* Ratio Id for Boost Pressure Low Rationality Monitor */
   #define IUMID_Vc09BoostLoPlausMon cIUMID_Vc09BoostLoPlausMon
   #define Vc09BoostLoPlausMon_DUMMY
   extern const UInt16 cIUMID_Vc09BoostLoPlausMon;
#endif

'''

DG2_IUMPR_C_TL = '''#ifdef Vc09BoostHiPlausMon_DUMMY
   /* Ratio Id for Boost Pressure High Rationality Monitor */
   const UInt16 cIUMID_Vc09BoostHiPlausMon = Vc09Undef;
#endif

#ifdef Vc09BoostLoPlausMon_DUMMY
   /* Ratio Id for Boost Pressure Low Rationality Monitor */
   const UInt16 cIUMID_Vc09BoostLoPlausMon = Vc09Undef;
#endif

'''

DG2_MODE06_H_TL = '''#ifndef TR_Vc06BoostHiPlausMon
   /* Test Result Id for high boost pressure Monitoring, UAS 17 */
   #define TR_Vc06BoostHiPlausMon cTR_Vc06BoostHiPlausMon
   #define Vc06BoostHiPlausMon_DUMMY
   extern const UInt16 cTR_Vc06BoostHiPlausMon;
#endif

#ifndef TR_Vc06BoostLoPlausMon
   /* Test Result Id for low boost pressure Monitoring, UAS 18 */
   #define TR_Vc06BoostLoPlausMon cTR_Vc06BoostLoPlausMon
   #define Vc06BoostLoPlausMon_DUMMY
   extern const UInt16 cTR_Vc06BoostLoPlausMon;
#endif

'''

DG2_MODE06_C_TL = '''#ifdef Vc06BoostHiPlausMon_DUMMY
   /* Test Result Id for high boost pressure Monitoring, UAS 17 */
   const UInt16 cTR_Vc06BoostHiPlausMon = Vc06Undef;
#endif

#ifdef Vc06BoostLoPlausMon_DUMMY
   /* Test Result Id for low boost pressure Monitoring, UAS 18 */
   const UInt16 cTR_Vc06BoostLoPlausMon = Vc06Undef;
#endif

'''

DG2_RNK_H_TL = '''#ifndef RVID_VcRvAmbPCompPlausMon
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   #define RVID_VcRvAmbPCompPlausMon cRVID_VcRvAmbPCompPlausMon
   #define VcRvAmbPCompPlausMon_DUMMY
   extern const UInt16 cRVID_VcRvAmbPCompPlausMon;
#endif

#ifndef RVID_VcRvCacPAmbPPlausMon
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   #define RVID_VcRvCacPAmbPPlausMon cRVID_VcRvCacPAmbPPlausMon
   #define VcRvCacPAmbPPlausMon_DUMMY
   extern const UInt16 cRVID_VcRvCacPAmbPPlausMon;
#endif

'''

DG2_RNK_C_TL = '''#ifdef VcRvAmbPCompPlausMon_DUMMY
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   const UInt16 cRVID_VcRvAmbPCompPlausMon = VcRvUndef;
#endif

#ifdef VcRvCacPAmbPPlausMon_DUMMY
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   const UInt16 cRVID_VcRvCacPAmbPPlausMon = VcRvUndef;
#endif

'''

DG2_IUMPR_H_EC = '''#ifndef IUMID_Vc09BoostHiPlausMon
   /* Ratio Id for Boost Pressure High Rationality Monitor */
   #define IUMID_Vc09BoostHiPlausMon cIUMID_Vc09BoostHiPlausMon
   #define Vc09BoostHiPlausMon_DUMMY
   extern const uint16_T cIUMID_Vc09BoostHiPlausMon;
#endif

#ifndef IUMID_Vc09BoostLoPlausMon
   /* Ratio Id for Boost Pressure Low Rationality Monitor */
   #define IUMID_Vc09BoostLoPlausMon cIUMID_Vc09BoostLoPlausMon
   #define Vc09BoostLoPlausMon_DUMMY
   extern const uint16_T cIUMID_Vc09BoostLoPlausMon;
#endif

'''

DG2_IUMPR_C_EC = '''#ifdef Vc09BoostHiPlausMon_DUMMY
   /* Ratio Id for Boost Pressure High Rationality Monitor */
   const uint16_T cIUMID_Vc09BoostHiPlausMon = Vc09Undef;
#endif

#ifdef Vc09BoostLoPlausMon_DUMMY
   /* Ratio Id for Boost Pressure Low Rationality Monitor */
   const uint16_T cIUMID_Vc09BoostLoPlausMon = Vc09Undef;
#endif

'''

DG2_MODE06_H_EC = '''#ifndef TR_Vc06BoostHiPlausMon
   /* Test Result Id for high boost pressure Monitoring, UAS 17 */
   #define TR_Vc06BoostHiPlausMon cTR_Vc06BoostHiPlausMon
   #define Vc06BoostHiPlausMon_DUMMY
   extern const uint16_T cTR_Vc06BoostHiPlausMon;
#endif

#ifndef TR_Vc06BoostLoPlausMon
   /* Test Result Id for low boost pressure Monitoring, UAS 18 */
   #define TR_Vc06BoostLoPlausMon cTR_Vc06BoostLoPlausMon
   #define Vc06BoostLoPlausMon_DUMMY
   extern const uint16_T cTR_Vc06BoostLoPlausMon;
#endif

'''

DG2_MODE06_C_EC = '''#ifdef Vc06BoostHiPlausMon_DUMMY
   /* Test Result Id for high boost pressure Monitoring, UAS 17 */
   const uint16_T cTR_Vc06BoostHiPlausMon = Vc06Undef;
#endif

#ifdef Vc06BoostLoPlausMon_DUMMY
   /* Test Result Id for low boost pressure Monitoring, UAS 18 */
   const uint16_T cTR_Vc06BoostLoPlausMon = Vc06Undef;
#endif

'''

DG2_RNK_H_EC = '''#ifndef RVID_VcRvAmbPCompPlausMon
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   #define RVID_VcRvAmbPCompPlausMon cRVID_VcRvAmbPCompPlausMon
   #define VcRvAmbPCompPlausMon_DUMMY
   extern const uint16_T cRVID_VcRvAmbPCompPlausMon;
#endif

#ifndef RVID_VcRvCacPAmbPPlausMon
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   #define RVID_VcRvCacPAmbPPlausMon cRVID_VcRvCacPAmbPPlausMon
   #define VcRvCacPAmbPPlausMon_DUMMY
   extern const uint16_T cRVID_VcRvCacPAmbPPlausMon;
#endif

'''

DG2_RNK_C_EC = '''#ifdef VcRvAmbPCompPlausMon_DUMMY
   /* Ranking Id for Ambient Pressure Rationality Monitor */
   const uint16_T cRVID_VcRvAmbPCompPlausMon = VcRvUndef;
#endif

#ifdef VcRvCacPAmbPPlausMon_DUMMY
   /* Ranking Id for CAC pressure vs Ambient pressure test */
   const uint16_T cRVID_VcRvCacPAmbPPlausMon = VcRvUndef;
#endif

'''
DG2_END_H = r'''#include "CVC_CODE_END.h"
#endif /* TESTFILE */
/*----------------------------------------------------------------------------*\
  END OF FILE
\*----------------------------------------------------------------------------*/
'''

DG2_END_C = r'''#include "CVC_CODE_END.h"
/*----------------------------------------------------------------------------*\
  END OF FILE
\*----------------------------------------------------------------------------*/
'''
